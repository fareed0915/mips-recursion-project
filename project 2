.data 
    Stack1: .space 160
    Stack2: .space 160
    Stack3: .space 160
    Stack4: .space 160
    Stack5: .space 160
    SizeStack: .word 40
    StringInput: .space 101
    naan: .asciiz "Invalid input"
.text
main: 
    li $t5, 2895579    # HU ID
    li $t4, 11
    div $t5, $t4 
    mfhi $t5 # module 11
    addi $s0, $t5, 26 
    addiu $t3, $s0, -10

   
    li $v0, 8
    la $a0, StringInput
    li $a1, 101
    syscall

    li $t9, 0
FirstLoop:
    la $a1, StringInput
    add $a1, $a1, $t9
    lb $a1, 0($a1) # $a1 = ord(str[i])

    li $t5, 32
    li $s2, 9
    seq $t5, $a1, $t5
    seq $s2, $a1, $s2
    or $t5, $t5, $s2
    beq $t5, $zero, end_FirstLoop 
        
    addi $t9, $t9, 1        #increment
    li $t4, 101
    slt $t5, $t9, $t4 
    bne $t5, $zero, FirstLoop   #continue
    
    j invalid_input

end_FirstLoop:
    li $t0, 0
    add $t0, $t9, $zero 
FirstLoop_no.2:
    la $a1, StringInput
    add $a1, $a1, $t0
    lb $a1, 0($a1) # ord(str[index])

    li $t5, 10
    beq $a1, $t5, end_FirstLoop_no.2

    addi $t0, $t0, 1 # increment
    li $t5, 100
    slt $t5, $t0, $t5
    bne $t5, $zero, FirstLoop_no.2

end_FirstLoop_no.2:

    li $s4, 0
    addi $t0, $t0, -1
    add $s4, $s4, $t0
    SecondLoop:

    la $a1, StringInput
    add $a1, $a1, $s4
    lb $a1, 0($a1) # ord(str[index])


    li $t5, 32
    li $s2, 9
    seq $t5, $a1, $t5
    seq $s2, $a1, $s2
    or $t5, $t5, $s2
    beq $t5, $zero, end_SecondLoop

    addi $s4, $s4, -1       # decrement
    li $t4, -1
    sgt $t5, $s4, $t4
    bne $t5, $zero, SecondLoop 

end_SecondLoop:
 sub $t7, $s4, $t9 
    slt $t4, $t7, $zero
    li $s3, 19
    sgt $t2, $t7, $s3
    or $t5, $t4, $t2
    bne $t5, $zero, invalid_input

    add $s5, $s4, $zero # count
    addi $s6, $t9, -1 
    sgt $s7, $s5, $s6
    beq $s7, $zero, back

    j subprogram
    # parameter $a1
    # return $t0 
back:
    li $v0, 1
    la $t7, Stack1
    lw $t5, SizeStack
    addi $t7, $t7, 156
    addi $s2, $zero, 1 # count = 0
    li $t4, 0
 print:
    beq $s2, $t5, end_print
    lw $a0, 0($t7)
    bne $a0, $zero, branch

    branchBack:
    beq $t4, $zero, skip_print

    # if print
    syscall

    skip_print:
    addi $t7, $t7, -4
    addi $s2, $s2, 1
    j print

    end_print:
    lw $a0, 0($t7)
    syscall
    j exit

    branch:
    li $t4, 1
    j branchBack
subprogram:
    lw $t5, SizeStack
    la $t4, Stack5
    la $s3, Stack4
    la $t2, Stack3
    la $t7, Stack2
    la $s7, Stack1
    li $s2, 0 #count

    initialize: #initialize stacks with zeros
    beq $s2, $t5, end_initialize
    sw $zero, 0($t4)
    sw $zero, 0($s3)
    sw $zero, 0($t2)
    sw $zero, 0($t7)
    sw $zero, 0($s7)
    addi $t4, $t4, 4
    addi $s3, $s3, 4
    addi $t2, $t2, 4
    addi $t7, $t7, 4
    addi $s7, $s7, 4
    addi $s2, $s2, 1
    j initialize

    end_initialize:
 li $t5, 10
    div $s0, $t5
    mfhi $t5
    mflo $t4
    la $s3, Stack4
    sw $t5, 0($s3)
    sw $t4, 4($s3)

    subprogram_loop:
    li $t5, 10
    div $s0, $t5
    mfhi $t5
    mflo $t4
    la $s3, Stack4
    sw $t5, 0($s3)
    sw $t4, 4($s3)
    la $a1, StringInput
    add $a1, $a1, $s5
    lb $t6, 0($a1)
jal convert_to_ascii #ascii value to decimal
    # parameter $t6 
    # returns val $t6

    sub $t1, $s4, $s5
    #initialize Stack2 with 01
    lw $t5, SizeStack # size
    la $t7, Stack2
    li $s2, 0 # count

    initialize2:
    beq $s2, $t5, end_initialize2
    sw $zero, 0($t7)
    addi $t7, $t7, 4
    addi $s2, $s2, 1
    j initialize2

    end_initialize2:
    li $t5, 1
    la $t4, Stack2
    sw $t5, 0($t4)
  exponent:
    # parameters Stack4, $t1
    # return in Stack2
    beq $t1, $zero end_exponent
    li $t5, 0 # carry
    li $t4, 8 # count i
    li $s3, 0 # Stack3 index
    # put values Stack2 in Stack5
    lw $t2, SizeStack
    la $t7, Stack2
    la $s2, Stack5
    li $s7, 0

    copy:
    beq $s7, $t2, end_copy
    lw $t0, 0($t7)
    sw $t0, 0($s2)
    addi $t7, $t7, 4
    addi $s2, $s2, 4
    addi $s7, $s7, 1
    j copy

    end_copy:
    lw $t5, SizeStack # array size
    la $t7, Stack2
    li $s2, 0 #count

    initialize3:
    beq $s2, $t5, end_initialize3
    sw $zero, 0($t7)
    addi $t7, $t7, 4
    addi $s2, $s2, 1
    j initialize3

    end_initialize3:
 multi: 
    # Stack5 * Stack4 = Stack2
    beq $t4, $zero, multiEnd
    li $t2, 160
    li $t5, 0

    multiIn:
    beq $t2, $zero multiInEnd
    li $t7, 160
    sub $t7, $t7, $t2
    li $s2, 8
    sub $s2, $s2, $t4
    la $s7, Stack5
    la $t0, Stack4
    add $s7, $s7, $t7
    lw $t7, 0($s7)
    add $t0, $t0, $s2
    lw $s2, 0($t0)

    mul $t7, $t7, $s2
    add $t7, $t7, $t5
    li $s2, 10
    div $t7, $s2
    mfhi $s2 # remainder
    mflo $t5 # quotient
    la $s7, Stack3
    add $s7, $s7, $s3
    sw $s2, 0($s7)

    addi $s3, $s3, 4 #increment
    addi $t2, $t2, -4
    j multiIn

    multiInEnd:

    li $t2, 160
    li $t7, 0 
addition:
    beq $t2, $zero end_addition
    li $s2, 160
    sub $s2, $s2, $t2 
    la $s7, Stack3
    la $t0, Stack2
    add $s7, $s7, $s2
    add $t0, $t0, $s2
    lw $t8, 0($s7) 
    lw $s1, 0($t0)
    add $s7, $t8, $s1 
    add $s7, $s7, $t7  # total += carry
    li $t0, 10
    div $s7, $t0
    mfhi $s7 # remainder
    mflo $t7   # quotient
    la $t8, Stack2
    add $t8, $t8, $s2
    sw $s7, 0($t8)
    addi $t2, $t2, -4
    j addition

    end_addition:

    la $t7, Stack3
    sw $zero, 0($t7)
    li $s3, 4
    addi $t4, $t4, -4 # decrement
    j multi
 multiEnd:
    addi $t1, $t1, -1
    j exponent

    end_exponent:
    lw $t5, SizeStack # size
    la $t7, Stack4
    li $s2, 0 # count

    initialize4:
    beq $s2, $t5, end_initialize4
    sw $zero, 0($t7)
    addi $t7, $t7, 4
    addi $s2, $s2, 1
    j initialize4

    end_initialize4:
    la $t5, Stack4
    li $t4, 10
    div $t6, $t4
    mfhi $t4
    mflo $s3 
    sw $t4, 0($t5)
    sw $s3, 4($t5)

    lw $t2, SizeStack
    la $t7, Stack2
    la $s2, Stack5
    li $s7, 0
