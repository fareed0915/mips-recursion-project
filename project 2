.data 
    Stack1: .space 160
    Stack2: .space 160
    Stack3: .space 160
    Stack4: .space 160
    Stack5: .space 160
    SizeStack: .word 40
    StringInput: .space 101
    naan: .asciiz "Invalid input"
.text
main: 
    li $t5, 2895579    # HU ID
    li $t4, 11
    div $t5, $t4 
    mfhi $t5 # module 11
    addi $s0, $t5, 26 
    addiu $t3, $s0, -10

   
    li $v0, 8
    la $a0, StringInput
    li $a1, 101
    syscall

    li $t9, 0
FirstLoop:
    la $a1, StringInput
    add $a1, $a1, $t9
    lb $a1, 0($a1) # $a1 = ord(str[i])

    li $t5, 32
    li $s2, 9
    seq $t5, $a1, $t5
    seq $s2, $a1, $s2
    or $t5, $t5, $s2
    beq $t5, $zero, end_FirstLoop 
        
    addi $t9, $t9, 1        #increment
    li $t4, 101
    slt $t5, $t9, $t4 
    bne $t5, $zero, FirstLoop   #continue
    
    j invalid_input

end_FirstLoop:
    li $t0, 0
    add $t0, $t9, $zero 
FirstLoop_no.2:
    la $a1, StringInput
    add $a1, $a1, $t0
    lb $a1, 0($a1) # ord(str[index])

    li $t5, 10
    beq $a1, $t5, end_FirstLoop_no.2

    addi $t0, $t0, 1 # increment
    li $t5, 100
    slt $t5, $t0, $t5
    bne $t5, $zero, FirstLoop_no.2

end_FirstLoop_no.2:

    li $s4, 0
    addi $t0, $t0, -1
    add $s4, $s4, $t0
    SecondLoop:

    la $a1, StringInput
    add $a1, $a1, $s4
    lb $a1, 0($a1) # ord(str[index])


    li $t5, 32
    li $s2, 9
    seq $t5, $a1, $t5
    seq $s2, $a1, $s2
    or $t5, $t5, $s2
    beq $t5, $zero, end_SecondLoop

    addi $s4, $s4, -1       # decrement
    li $t4, -1
    sgt $t5, $s4, $t4
    bne $t5, $zero, SecondLoop 

end_SecondLoop:
 sub $t7, $s4, $t9 
    slt $t4, $t7, $zero
    li $s3, 19
    sgt $t2, $t7, $s3
    or $t5, $t4, $t2
    bne $t5, $zero, invalid_input

    add $s5, $s4, $zero # count
    addi $s6, $t9, -1 
    sgt $s7, $s5, $s6
    beq $s7, $zero, back

    j subprogram
    # parameter $a1
    # return $t0 
back:
    li $v0, 1
    la $t7, Stack1
    lw $t5, SizeStack
    addi $t7, $t7, 156
    addi $s2, $zero, 1 # count = 0
    li $t4, 0
 print:
    beq $s2, $t5, end_print
    lw $a0, 0($t7)
    bne $a0, $zero, branch

    branchBack:
    beq $t4, $zero, skip_print

    # if print
    syscall

    skip_print:
    addi $t7, $t7, -4
    addi $s2, $s2, 1
    j print

    end_print:
    lw $a0, 0($t7)
    syscall
    j exit

    branch:
    li $t4, 1
    j branchBack
subprogram:
    lw $t5, SizeStack
    la $t4, Stack5
    la $s3, Stack4
    la $t2, Stack3
    la $t7, Stack2
    la $s7, Stack1
    li $s2, 0 #count

    initialize: #initialize stacks with zeros
    beq $s2, $t5, end_initialize
    sw $zero, 0($t4)
    sw $zero, 0($s3)
    sw $zero, 0($t2)
    sw $zero, 0($t7)
    sw $zero, 0($s7)
    addi $t4, $t4, 4
    addi $s3, $s3, 4
    addi $t2, $t2, 4
    addi $t7, $t7, 4
    addi $s7, $s7, 4
    addi $s2, $s2, 1
    j initialize

    end_initialize:
